# special actions are imported
from selenium import webdriver
from selenium.webdriver.common.by import By
import time
from selenium.webdriver import ActionChains
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import tkinter as tk
from tkinter import *

# this line means we are using webdriver.Edge() and we are choosing to name it "driver"
driver = webdriver.Edge()

# this is us telling driver to maximize the window
driver.maximize_window()

# program continuously checks for an expected condition, timeout after 30 seconds
wait = WebDriverWait(driver, 60)
longwait = WebDriverWait(driver, 300)

# driver takes us to specified link
driver.get('https://paccar-production-tm.launchpad.cfapps.us20.hana.ondemand.com/site/paccar-transport-portal?sap-client=300&sap-language=EN#Packaging-Approval?sap-ui-app-id-hint=b6223af4-2c2f-4cf5-85ce-827026b31c71&/approver')
time.sleep(5)

# waits until iframe loads
element = longwait.until(
    EC.presence_of_element_located((By.ID, 'application-Packaging-Approval'))
)

# iframe is like a webpage inside of a webpage
# driver must be switched to inside webpage, or it cannot interact
iframe_id = 'application-Packaging-Approval'
driver.switch_to.frame(iframe_id)

# wait until "row bar" loads, this indicates that page has loaded
element = wait.until(
    EC.presence_of_element_located((By.ID, '__input1-inner'))
)

# these variables need to be used in the code to verify
# ex. if weight1 >= weight >= 0:

root = Tk()
root.title('Approval Configuration Window')
root.geometry('975x600')
root.attributes('-topmost', True)

root.grid_rowconfigure(0, minsize=20)
root.grid_columnconfigure(0, minsize=20)

lab1 = tk.Label(root, text='CLOSING THIS WINDOW WILL BEGIN AUTOMATION', font=10, fg='red')
lab1.grid(row=1, column=1, sticky='w')

root.grid_rowconfigure(2, minsize=20)

lab2 = tk.Label(root, text='Move or Minimize This Window. Do Not Close Yet', font=12)
lab2.grid(row=3, column=1, sticky='w')

root.grid_rowconfigure(4, minsize=20)

lab3 = tk.Label(root, text='In Approval Portal:', font=10)
lab3.grid(row=5, column=1, sticky='w')

lab4 = tk.Label(root, text='1. Zoom out or scroll until "Requested By" column is visible', font=10)
lab4.grid(row=6, column=1, sticky='w')

lab5 = tk.Label(root, text='2. Arrange data so that 10 rows are visible', font=10)
lab5.grid(row=7, column=1, sticky='w')

lab6 = tk.Label(root, text='3. Show filter bar and filter data as desired', font=10)
lab6.grid(row=8, column=1, sticky='w')

lab7 = tk.Label(root, text='4. Choose parameters below (empty boxes ok)', font=10)
lab7.grid(row=9, column=1, sticky='w')

root.grid_rowconfigure(10, minsize=20)

weightlabel = tk.Label(root, text='Acceptable Weight Limit (default = 500)')
weightlabel.grid(row=11, column=1, sticky='w')
weightentry = tk.Entry(root)
weightentry.grid(row=11, column=2, sticky='w')
weightcomment = tk.Label(root, text='', fg='gray')
weightcomment.grid(row=11, column=3, sticky='w')

lengthlabel = tk.Label(root, text='Acceptable Length Limit (default = 500)')
lengthlabel.grid(row=12, column=1, sticky='w')
lengthentry = tk.Entry(root)
lengthentry.grid(row=12, column=2, sticky='w')
lengthcomment = tk.Label(root, text='', fg='gray')
lengthcomment.grid(row=12, column=3, sticky='w')

widthlabel = tk.Label(root, text='Acceptable Width Limit (default = 500)')
widthlabel.grid(row=13, column=1, sticky='w')
widthentry = tk.Entry(root)
widthentry.grid(row=13, column=2, sticky='w')
widthcomment = tk.Label(root, text='', fg='gray')
widthcomment.grid(row=13, column=3, sticky='w')

heightlabel = tk.Label(root, text='Acceptable Height Limit (default = 500)')
heightlabel.grid(row=14, column=1, sticky='w')
heightentry = tk.Entry(root)
heightentry.grid(row=14, column=2, sticky='w')
heightcomment = tk.Label(root, text='', fg='gray')
heightcomment.grid(row=14, column=3, sticky='w')

pkglabel = tk.Label(root, text='Acceptable PKG ID Letters (see comment)')
pkglabel.grid(row=15, column=1, sticky='w')
pkgentry = tk.Entry(root)
pkgentry.grid(row=15, column=2, sticky='w')
PLTcomment = tk.Label(root, text='already included: PLTs, CTNs, COPs, T12s, T24Ss, B32Ss', fg='gray')
PLTcomment.grid(row=15, column=3)

maxlabel = tk.Label(root, text='Acceptable Quantity Limit (default = 800)')
maxlabel.grid(row=16, column=1, sticky='w')
maxentry = tk.Entry(root)
maxentry.grid(row=16, column=2, sticky='w')
maxcomment = tk.Label(root, text='', fg='gray')
maxcomment.grid(row=16, column=3, sticky='w')

namelabel = tk.Label(root, text='Acceptable "Requested By" Name (see comment)')
namelabel.grid(row=17, column=1, sticky='w')
nameentry = tk.Entry(root)
nameentry.grid(row=17, column=2, sticky='w')
comment = tk.Label(root, text='already included: SidhdeeBhase', fg='gray')
comment.grid(row=17, column=3, sticky='w')

root.grid_rowconfigure(18, minsize=20)

looplabel = tk.Label(root, text='Number of Iterations (default = 100)')
looplabel.grid(row=19, column=1, sticky='w')
loopentry = tk.Entry(root)
loopentry.grid(row=19, column=2, sticky='w')
loopcomment = tk.Label(root, text='', fg='gray')
loopcomment.grid(row=19, column=3)

root.grid_rowconfigure(20, minsize=20)

root.grid_rowconfigure(22, minsize=20)

lab8 = tk.Label(root, text='5. Click submit and close this window to begin automated approval', font=10)
lab8.grid(row=24, column=1, sticky='w')

root.grid_rowconfigure(25, minsize=20)

inputweightlist = []
inputlengthlist = []
inputwidthlist = []
inputheightlist = []
inputpkglist = []
inputmaxlist = []
inputnamelist = []
inputlooplist = []


def getit():
    weight1 = weightentry.get()
    length1 = lengthentry.get()
    width1 = widthentry.get()
    height1 = heightentry.get()
    pkg1 = pkgentry.get()
    max1 = maxentry.get()
    name1 = nameentry.get()
    loop1 = loopentry.get()

    inputweightlist.append(weight1)
    inputlengthlist.append(length1)
    inputwidthlist.append(width1)
    inputheightlist.append(height1)
    inputpkglist.append(pkg1)
    inputmaxlist.append(max1)
    inputnamelist.append(name1)
    inputlooplist.append(loop1)

submit = tk.Button(root, text="Submit", command=getit)
submit.grid(row=21, column=2, sticky='w')

mainloop()

try:
    inputweight = int(inputweightlist[0])
    #print('inputweight =', inputweight)
except ValueError:
    inputweight = 500
    print('inputweight defaulted to', inputweight)
except IndexError:
    inputweight = 500
    print('inputweight defaulted to', inputweight)
try:
    inputlength = int(inputlengthlist[0])
    #print('inputlength =', inputlength)
except ValueError:
    inputlength = 500
    print('inputlength defaulted to', inputlength)
except IndexError:
    inputlength = 500
    print('inputlength defaulted to', inputlength)
try:
    inputwidth = int(inputwidthlist[0])
    #print('inputwidth =', inputwidth)
except ValueError:
    inputwidth = 500
    print('inputwidth defaulted to', inputwidth)
except IndexError:
    inputwidth = 500
    print('inputwidth defaulted to', inputwidth)
try:
    inputheight = int(inputheightlist[0])
    #print('inputheight =', inputheight)
except ValueError:
    inputheight= 500
   print('inputheight defaulted to', inputheight)
except IndexError:
    inputheight = 500
    print('inputheight defaulted to', inputheight)
try:
    inputpkg = inputpkglist[0]
    #print('inputpkg =', inputpkg)
except IndexError:
    inputpkg = 'PLT'
try:
    inputmax = int(inputmaxlist[0])
    #print('inputmax =', inputmax)
except ValueError:
    inputmax= 500
    print('inputmax defaulted to', inputmax)
except IndexError:
    inputmax = 500
    print('inputmax defaulted to', inputmax)
try:
    inputname = inputnamelist[0]
    #print('inputname =', inputname)
except IndexError:
    inputname = 'SidhdeeBhase'
try:
    inputloop = int(inputlooplist[0])
    #print('inputloop =', inputloop)
except ValueError:
    inputloop= 100
    print('inputloop defaulted to', inputloop)
except IndexError:
    inputloop = 100
    print('inputloop defaulted to', inputloop)

# row_number is the variable that specifies which row to inspect
# rows start at 0 so row_number - 1 is used where row_number is referenced
# dashboard only displays 10 rows so row_number cannot exceed 10
row_number = 1

# loopcount counts number of loops/approvals
loopcount = 1

# page_number counts page number
page_number = 1

errorcount = 0

approvalcount = 0

# loop will run until one of these conditions is false
while loopcount <= inputloop:

    if row_number == 11:
        nextbutton = driver.find_element(By.XPATH, '//button[@id="__button8"]')
        ActionChains(driver) \
            .click(nextbutton) \
            .perform()

        # driver sleeps for 5 seconds so page can load
        time.sleep(5)

        row_number -= 10
        page_number += 1

    # driver waits until clickbox is visible
    element = wait.until(
        EC.presence_of_element_located((By.XPATH, f'//tr[@id="__table0-rows-row{row_number - 1}-fixed"]'))
    )

    # driver selects box at beginning of row
    clickbox = driver.find_element(By.XPATH, f'//tr[@id="__table0-rows-row{row_number - 1}-fixed"]')
    ActionChains(driver) \
        .click(clickbox) \
        .perform()

    print('_____')

    namelist = []
    namecell = driver.find_elements(By.XPATH, f'//*[@id="__table0-rows-row{row_number - 1}-col18"]')
    for n in namecell:
        # print(n.text)
        namelist.append(n.text)
    name = namelist[0]
    #print(name)
    if (name == 'SidhdeeBhase') or (name == 'GitjalpiWad') or (name == inputname):
        nameresponse = 'Acceptable Name,'
        # print(nameresponse, name)
    else:
        nameresponse = 'Unacceptable Name,'
        print(nameresponse, name)

    weightcell = driver.find_element(By.XPATH,
                                     f'//*[@id="__table0-rows-row{row_number - 1}-col7"]//input[contains(@id,"__input3")]')
    try:
        weight = float(weightcell.get_attribute('value'))
        #print(weight, 'lbs')
    except ValueError:
        weight = 999
        #print('Unacceptable Weight Value, Cell is Empty')
    if inputweight >= weight >= 0:
        weightresponse = 'Acceptable Weight Value,'
        # print(weightresponse, weight)
    elif weight == 999:
        weightresponse = 'Unacceptable Weight Value, Cell is Empty'
        print(weightresponse)
    else:
        weightresponse = 'Unacceptable Weight Value,'
        print(weightresponse, weight)

    longcell = driver.find_element(By.XPATH,
                                   f'//*[@id="__table0-rows-row{row_number - 1}-col8"]//input[contains(@id,"__input4")]')
    try:
        longness = float(longcell.get_attribute('value'))
        #print(longness, 'inches')
    except ValueError:
        longness = 999
        #print('Unacceptable Longness Value, Cell is Empty')
    if inputlength >= longness >= 0:
        longresponse = 'Acceptable Length Value,'
        # print(longresponse, longness)
    elif longness == 999:
        longresponse = 'Unacceptable Length Value, Cell is Empty'
        print(longresponse)
    else:
        longresponse = 'Unacceptable Length Value,'
        print(longresponse, longness)

    widthcell = driver.find_element(By.XPATH,
                                    f'//*[@id="__table0-rows-row{row_number - 1}-col9"]//input[contains(@id,"__input5")]')
    try:
        width = float(widthcell.get_attribute('value'))
        #print(width, 'inches')
    except ValueError:
        width = 999
        #print('Unacceptable Width Value, Cell is Empty')
    if inputwidth >= width >= 0:
        widthresponse = 'Acceptable Width Value,'
        # print(widthresponse, width)
    elif width == 999:
        widthresponse = 'Unacceptable Width Value, Cell is Empty'
        print(widthresponse)
    else:
        widthresponse = 'Unacceptable Width Value,'
        print(widthresponse, width)

    heightcell = driver.find_element(By.XPATH,
                                     f'//*[@id="__table0-rows-row{row_number - 1}-col10"]//input[contains(@id,"__input6")]')
    try:
        height = float(heightcell.get_attribute('value'))
        #print(height, 'inches')
    except ValueError:
        height = 999
        #print('Unacceptable Height Value, Cell is Empty')
    if inputheight >= height >= 0:
        heightresponse = 'Acceptable Height Value,'
        # print(heightresponse, height)
    elif height == 999:
        heightresponse = 'Unacceptable Height Value, Cell is Empty'
        print(heightresponse)
    else:
        heightresponse = 'Unacceptable Height Value,'
        print(heightresponse, height)

    # returns blank if empty
    PLTcell = driver.find_element(By.XPATH,
                                  f'//*[@id="__table0-rows-row{row_number - 1}-col11"]//input[contains(@id,"__input7")]')
    PLT = PLTcell.get_attribute('value')
    # Can I approve CTN also? Yes, if name approve, but leave out of code
    if ('CTN' in PLT) or ('COP' in PLT) or ('T12' in PLT) or ('T24S' in PLT) or ('B32S' in PLT) or ('PLT' in PLT) or (inputpkg in PLT):
        PLTresponse = 'Acceptable PLT Number,'
        #print(PLTresponse, PLT)
    else:
        PLTresponse = 'Unacceptable PLT Number,'
        print(PLTresponse, PLT)

    # returns blank if empty
    QTYcell = driver.find_element(By.XPATH,
                                  f'//*[@id="__table0-rows-row{row_number - 1}-col12"]//input[contains(@id,"__input8")]')
    try:
        QTY = float(QTYcell.get_attribute('value'))
        #print('Max Qty per pkg =', QTY)
    except ValueError:
        QTY = 999
        #print('QTY Cell is Empty')
    if inputmax >= QTY >= 0:
        QTYresponse = 'Acceptable Quantity Value,'
        # print(QTYresposne, QTY)
    elif QTY == 999:
        QTYresponse = 'Unacceptable Quantity Value, Cell is Empty'
        print(QTYresponse)
    else:
        QTYresponse = 'Unacceptable Quantity Value,'
        print(QTYresponse, QTY)

    alsopalletcell = driver.find_element(By.XPATH,
                                         f'//*[@id="__table0-rows-row{row_number - 1}-col15"]//div[contains(@id,"__switch3")]')
    alsopallet = alsopalletcell.get_attribute('aria-checked')
    #print('Also Ship On Pallet? =', alsopallet)

    # returns blank if empty
    SPLTcell = driver.find_element(By.XPATH,
                                   f'//*[@id="__table0-rows-row{row_number - 1}-col16"]//input[contains(@id,"__input11")]')
    SPLT = SPLTcell.get_attribute('value')
    #print('SPLT Number =', SPLT)

    if alsopallet == 'true' and 'SPLT' in SPLT:
        SPLTresponse = 'Acceptable SPLT Value and Pallet Value,'
        # print(SPLTresponse, SPLT, 'and', alsopallet)
    elif alsopallet == 'false' and len(SPLT) == 0:
        SPLTresponse = 'Acceptable SPLT Value and Pallet Value'
        # print(SPLTresponse, SPLT, 'and', alsopallet)
    else:
        SPLTresponse = 'Unacceptable Pallet Info Combo'
        print(SPLTresponse, SPLT, 'and', alsopallet)

    valueslist = []
    approvelist = []

    if ((name == 'SidhdeeBhase') or (name == 'GitjalpiWad') or (name == inputname)) \
            and inputweight >= weight >= 0 and inputlength >= longness >= 0 and inputwidth >= width >= 0 and inputheight >= height >= 0 \
            and (('CTN' in PLT) or ('COP' in PLT) or ('T12' in PLT) or ('T24S' in PLT) or ('B32S' in PLT) or ('PLT' in PLT) or (inputpkg in PLT)) \
            and inputmax >= QTY >= 0 \
            and ((alsopallet == 'true' and 'SPLT' in SPLT) or (alsopallet == 'false' and len(SPLT) == 0)):
        values1 = 'Acceptable'
        # print(values1)
        valueslist.append(values1)

        greenbutton = driver.find_element(By.XPATH,
                                          f'//tr[@id="__table0-rows-row{row_number - 1}"]//button[@title="Approve"]')
        ActionChains(driver) \
            .click(greenbutton) \
            .perform()

        #element = longwait.until(EC.element_to_be_clickable((By.XPATH, '//button[bdi[text()="Yes"]]')))
        time.sleep(3)

        approvebutton = driver.find_element(By.XPATH, '//bdi[text()="Yes"]')
        ActionChains(driver) \
            .click(approvebutton) \
            .perform()

        element = wait.until(
            EC.presence_of_element_located((By.XPATH, '//bdi[text()="OK"]'))
        )
        errorpop = driver.find_elements(By.XPATH, '//*[text()="ERROR"]')
        approvepop = driver.find_elements(By.XPATH, '//*[text()="INFORMATION"]')

        approvelist1 = []

        if errorpop:
            approve2 = 'Error'
            # print(approveinner)
            yesbutton = driver.find_element(By.XPATH, '//*[contains(@id,"__mbox-btn")]')
            ActionChains(driver) \
                .click(yesbutton) \
                .perform()
            approvelist1.append(approve2)
            errorcount += 1
        elif approvepop:
            approve2 = 'Approved'
            # print(approveinner)
            yesbutton = driver.find_element(By.XPATH, '//*[contains(@id,"__mbox-btn")]')
            ActionChains(driver) \
                .click(yesbutton) \
                .perform()
            approvelist1.append(approve2)
            approvalcount += 1
        else:
            print('No Pop Up EMERGENCY ************')

        approve1 = approvelist1[0]
        # print(approve1)
        approvelist.append(approve1)

    else:
        values1 = 'Unacceptable'
        # print(values1)
        approve1 = 'Not Approved'
        # print(approve1)
        valueslist.append(values1)
        approvelist.append(approve1)
        errorcount += 1

    values = valueslist[0]
    approve = approvelist[0]
    print('P',page_number, 'R', row_number, 'L', loopcount,'.', values, 'and', approve)

    if values == 'Unacceptable' or approve == 'Error':
        row_number += 1
    loopcount += 1

    #element = wait.until(EC.element_to_be_clickable((By.XPATH,'//bdi[text()="Go"]')))
    if approve == 'Approved':
        time.sleep(5)

print('Final page_number:', page_number)
print('Final row_number:', row_number - 1)
print('Loop iterations:', loopcount - 1)
print('Approved Count', approvalcount)
print('Error Count', errorcount)

rootend = tk.Tk()
rootend.title('Finish Line Window')
rootend.geometry('500x200')
rootend.attributes('-topmost', True)

lab9 = tk.Label(rootend, text='Auto Approval Run Complete! YAY!', font=10)
lab9.grid(row=1, column=1, sticky='w')

rootend.grid_rowconfigure(2, minsize=20)

lab10 = tk.Label(rootend, text='Close this window after reviewing approvals', font=10)
lab10.grid(row=3, column=1, sticky='w')

rootend.mainloop()

driver.quit()
